{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Notification","message","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","Footer","style","color","fontStyle","fontSize","notesToShow","filter","map","i","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"mOAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACfC,EAAQF,EAAKG,UAChB,qBAAuB,iBAEzB,OACE,wBAAIC,UAAU,QACZJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,gBCuB1B,EAtBA,WACb,IAAMK,EAAUC,IAAMC,IAVR,cAWRC,EAAc,CAClBC,GAAI,IACJN,QAAS,mCACTO,KAAM,2BACNT,WAAW,GAEb,OAAOI,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAcxC,EAVA,SAAAO,GAEd,OADgBT,IAAMU,KAtBP,aAsBqBD,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ3B,EALA,SAACJ,EAAIM,GAEnB,OADgBT,IAAMW,IAAN,UA3BD,aA2BC,YAAwBR,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCd3BK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,yBAAKjB,UAAU,SACZiB,ICiIQC,EAtIH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAgBhBC,qBAAU,WACRC,IAEGpB,MAAK,SAAAqB,GACJT,EAASS,QAEZ,IAIH,IAsDMC,EAAS,WAOb,OACE,yBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKR,6BACA,uGAUAC,EAAcZ,EAChBJ,EACAA,EAAMiB,QAAO,SAAAzC,GAAI,OAAIA,EAAKG,aAE9B,OACE,6BACE,qCACA,kBAAC,EAAD,CAAckB,QAASS,IACvB,6BACE,4BAAQxB,QAAS,kBAAMuB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGY,EAAYE,KAAI,SAAC1C,EAAM2C,GAAP,OAChB,kBAAC,EAAD,CACGC,IAAKD,EACL3C,KAAMA,EACNC,iBAAkB,kBA1DD,SAAAU,GAEzB,IAAMX,EAAOwB,EAAMqB,MAAK,SAAAC,GAAC,OAAIA,EAAEnC,KAAOA,KAChCoC,EAAW,eAAO/C,EAAP,CAAaG,WAAYH,EAAKG,YAE/C8B,EACUtB,EAAIoC,GAAalC,MAAK,SAAAmC,GAC5BvB,EAASD,EAAMkB,KAAI,SAAA1C,GAAI,OAAIA,EAAKW,KAAOA,EAAKX,EAAOgD,SAEpDC,OAAM,SAAAC,GACLnB,EAAgB,SAAD,OACJ/B,EAAKK,QADD,sCAGf8C,YAAW,WACTpB,EAAgB,QACf,KACHN,EAASD,EAAMiB,QAAO,SAAAK,GAAC,OAAIA,EAAEnC,KAAOA,SA0CRyC,CAAmBpD,EAAKW,WAItD,0BAAM0C,SAhGM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBnD,QAASqB,EACTd,MAAM,IAAI6C,MAAOC,cACjBvD,UAAWwD,KAAKC,SAAW,IAI7B3B,EACUuB,GACP3C,MAAK,SAAAmC,GACJvB,EAASD,EAAMR,OAAOgC,IACtBrB,EAAW,SAoFX,2BACEkC,MAAOnC,EACPoC,SAtEiB,SAACR,GACxBS,QAAQC,IAAIV,EAAMW,OAAOJ,OACzBlC,EAAW2B,EAAMW,OAAOJ,UAsEpB,4BAAQK,KAAK,UAAb,SAEF,kBAAC/B,EAAD,Q,MC/HNgC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.5c66dae2.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n\tconst label = note.important\n\t\t? 'make not important' : 'make important'\n\n  return (\n    <li className='note'>\n    \t{note.content}\n    \t<button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note\n","import axios from 'axios'\nconst baseUrl = '/api/notes'\n// const baseUrl = 'https://secure-bastion-59732.herokuapp.com/api/notes'\n// const baseUrl = 'http://localhost:3001/api/notes'\n\n// const getAll = () => {\n// \tconst request = axios.get(baseUrl)\n// \treturn request.then(response => response.data)\n// }\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  }\n  return request.then(response => response.data.concat(nonExisting))\n}\n\n\nconst create = newObject => {\n\tconst request = axios.post(baseUrl, newObject)\n\treturn request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n\tconst request = axios.put(`${baseUrl}/${id}`, newObject)\n\treturn request.then(response => response.data)\n}\n\nexport default { getAll, create, update }\n","\nimport React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification\n","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  // const hook = () => {\n  //   console.log('effect')\n  //   axios\n  //     .get('http://localhost:3001/notes')\n  //     .then(response => {\n  //       console.log('promise fulfilled')\n  //       setNotes(response.data)\n  //     })\n  // }\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n  \n  // console.log('render', notes.length, 'notes')\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      // id: notes.length + 1,\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n    // axios\n    //   .post('http://localhost:3001/notes', noteObject)\n    //   .then(response => {\n    //     setNotes(notes.concat(response.data))\n    //     setNewNote('')\n    //     // console.log(response)\n    //   })\n\n    // setNotes(notes.concat(noteObject))\n    // setNewNote('')\n    // console.log('button clicked', event.target)\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const toggleImportanceOf = id => {\n    // const url = `http://localhost:3001/notes/${id}`\n    const note = notes.find(n => n.id === id)\n    const changedNote = {...note, important: !note.important}\n\n    noteService\n      .update(id, changedNote).then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))       \n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  const Footer = () => {\n    const footerStyle = {\n      color: 'green',\n      fontStyle: 'italic',\n      fontSize: 16\n    }\n\n    return (\n      <div style={footerStyle}>\n        <br />\n        <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n      </div>\n    )\n  }\n\n  //   axios.put(url, changedNote).then(response => {\n  //   })\n  //   console.log(`importance of ${id} was toggled`)\n  // }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note, i) =>\n        \t<Note\n            key={i}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n         )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\n// import axios from 'axios'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// axios.get('http://localhost:3001/notes').then(response => {\n//   const notes = response.data\n//   ReactDOM.render(\n//     <App notes={notes} />,\n//     document.getElementById('root')\n//   )\n// })\n\n\n// const promise = \n\n// axios\n//   .get('http://localhost:3001/notes')\n//   .then(response => {\n//     const notes = response.data\n//     console.log(notes)\n// })\n\n\n// // console.log(promise)\n\n// // promise.then(response => {\n// //   console.log(response)\n// // })\n\n// // const promise2 = axios.get('http://localhost:3001/foobar')\n// // console.log(promise2)\n\n// const notes = [\n//   {\n//     id: 1,\n//     content: 'HTML is easy',\n//     date: '2020-01-10T17:30:31.098Z',\n//     important: true\n//   },\n//   {\n//     id: 2,\n//     content: 'Browser can execute only Javascript',\n//     date: '2020-01-10T18:39:34.091Z',\n//     important: false\n//   },\n//   {\n//     id: 3,\n//     content: 'GET and POST are the most important methods of HTTP protocol',\n//     date: '2020-01-10T19:20:14.298Z',\n//     important: true\n//   }\n// ]\n\n\n// ReactDOM.render(\n//   <App notes={notes} />,\n//   document.getElementById('root')\n// )"],"sourceRoot":""}